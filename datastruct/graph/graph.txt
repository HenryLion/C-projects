图的基本概念
名词和术语：
<v,w> v----->w 表示从顶点v到定点w的一条弧。称顶点v为弧尾，顶点w为弧头。由顶点集和弧集构成的图称作有向图。
由顶点集和边构成的图称作无向图。(边是双向的)
弧或边带权的图分别称作有向网或无向网。
完全图：图有n个顶点，含有n(n-1)/2条边的无向图称作完全图
含有n(n-1)条弧的有向图称作有向完全图
若边或弧的个数<nlogn,则称作稀疏图，否则称为稠密图。

假若顶点v
和顶点w之间存在一条边，则称顶点v和w互为临接点,边(v,w)和顶点v和w相关联。和顶点v
关联的边的数目定义为边的度。

对有向图来说，以顶点v为弧尾的弧的数目定义为顶点的出度;以顶点v为弧头的弧的数目定义为顶点的入度。
度=出度+入度

从顶点u到顶点v之间存在一条路径，路径上边的数目称作路径长度。
若序列中的顶点不重复出现，则称作简单路径。若u=v则成为回路或简单回路。

若图中任意两个顶点之间都有路径相通，则称此图为连通图;若无向图为非连通图，则图中各个极大连通子图称作此图的连通分量。

对有向图，若任意两个顶点之间都存在一条有向路径，则称此有向图为强连通图。否则，其各个强连通子图称作它的强连通分量。 

生成树：极小连通子图为此连通图的生成树。

图的存储表示：
1、图的数组(邻接矩阵)存储表示

typedef struct ArcCell // 图弧(边)结构
{
	VRType adj; //表示顶点关系类型 对无权图，用1或0表示是否相邻;对带权图，为权值类型
	InfoType *info; // 该弧相关信息的指针
}ArcCell, AdjMatrix[NUM][NUM];

typedef struct 
{
	Point vexs[MAX_POINT_NUM]; // 图的顶点信息
	AdjMatrix arcs; // 图的弧(边)邻接矩阵
	int point_num, arc_num; // 定点和边的个数
	GraphKind kind; // 图的类型
} Graph;

2、图的邻接表表示结构 (节点以及节点为弧尾的链表)邻接表可以找到出发的弧
1:A  2:B  3:C  4:D  5:E  6:F
A -> 2 -> 5
B -> 1 -> 5 -> 6
C -> 4 -> 6
D -> 3 -> 6
E -> 1 -> 2
F -> 2 -> 3 -> 4

typdef struct ArcNode
{
	int adjvex; // 该弧所指向的顶点在数组中的位置
	struct ArcNode *nextarc; // 指向下一条弧的指针
	InfoType *info; // 该弧相关信息的指针
}ArcNode;

typedef struct VNode
{
	VertexType data; //顶点信息
	ArcNode *firstarc; // 指向第一条依附该定点的弧
} VNode, AdjList[NUM];

typedef struct
{
	AdjList vertices;
	int vexnum, arcnum;
	int kind;
} Graph;

逆邻接表：(节点以及节点为弧头的链表) 逆邻接表可以找到指向的弧

3、有向图的十字链表表示
typedef struct ArcBox 
{
	int tailvex, headvex; // 该弧尾和头顶点在数组中的位置
	struct ArcBox *hlink, *tlink; // 分别指向下一个弧头相同和弧尾相同弧的指针域
	InfoType *info; // 该弧相关信息的指针
}ArcBox;

typedef struct VexNode
{
	VertexType data;
	ArcBox *firstin, *firstout;
}VexNode;

typedef struct
{
	VexNode xlist[NUM];
	int vex_num, arc_num;
} Graph;

4、无向图的邻接多重表存储表示
typedef struct Bbox
{
	VisitIf mark; // 访问标记
	int ivex, jvex; // 该边依附的两个顶点的位置
	struct Bbox *ilink, *jlink; // 和i相关的下一条边，和j相关的下一条边
	InfoType *info; // 该边信息指针
}Bbox;

typedef struct VexBox
{
	VertexType data;
	Bbox *firstedge; // 指向第一条依附该顶点的边
}VexBox;

typedef struct
{
	VexBox adjmulist[NUM];
	int vex_num, edge_num;
}Graph;

图的遍历：
从图中某个顶点出发，访遍图中其余顶点，并且使图中的每个顶点仅被访问一次的过程。

深度优先搜索：从图中某个定点v出发，访问此顶点，然后依次从v的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到，若此时图中还有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。
