/* 树的概念 */

结点：数据元素+若干指向子树的分支
节点的度：分支的个数
树的度：树中所有节点的度的最大值
叶子节点：度为0的节点
分支节点：度大于0的节点
路径：从根到该节点所经分支和节点构成的路径
树的深度：树有多少层
森林：是m棵互不相交的树的集合

树的基本操作：查找 插入 删除


二叉树或为空树，或是由一个根节点加上两棵分别成为左子树和右子树，互不相交的二叉树组成

二叉树五种基本形态：
空树 只有根节点 右子树空  左子树空 左右子树都不空

线索二叉树：
遍历二叉树的结果是求得节点的一个线性序列，指向该线性序列中的前驱和后继的指针，称作线索

包含线索的存储结构称做线索链表

与其相应的二叉树叫线索二叉树

线索二叉树需要在各个节点添加前驱和后继的指针，这些指针指向因先序或中序或后续遍历而不同

指向前驱的指针添加在左子树为空的节点上
指向后继的指针添加在右子树为空的节点上
所以在原二叉链表的节点中欧给你增加两个标志域，做如下规定：
若该节点的左子树不空，则l_node域的指针指向其左子树，且左标志域的值为0;否则,l_node域的指针指向其前驱且左标志的值为1
若该节点的右子树不空，则r_node域的指针指向其右子树，且右标志域的值为0;否则,r_node域的指针指向其后继且右标志的值为1

所以线索链表的节点结构应当如下:
typedef struct BiTreeNode
{
	TElemType data;
	struct BiTreeNode *l_node, *r_node;
	Flag l_tag, r_tag;
} BiTreeNode, *BiTree;
